{
  "_args": [
    [
      {
        "raw": "menubar@^5.2.3",
        "scope": null,
        "escapedName": "menubar",
        "name": "menubar",
        "rawSpec": "^5.2.3",
        "spec": ">=5.2.3 <6.0.0",
        "type": "range"
      },
      "/Users/prepress/Desktop/RD/simone"
    ]
  ],
  "_from": "menubar@>=5.2.3 <6.0.0",
  "_id": "menubar@5.2.3",
  "_inCache": true,
  "_location": "/menubar",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/menubar-5.2.3.tgz_1486657941106_0.4695481490343809"
  },
  "_npmUser": {
    "name": "maxogden",
    "email": "max@maxogden.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "menubar@^5.2.3",
    "scope": null,
    "escapedName": "menubar",
    "name": "menubar",
    "rawSpec": "^5.2.3",
    "spec": ">=5.2.3 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/menubar/-/menubar-5.2.3.tgz",
  "_shasum": "8f2761597b4a0ee87edf04a87d8aab1aac2c44e9",
  "_shrinkwrap": null,
  "_spec": "menubar@^5.2.3",
  "_where": "/Users/prepress/Desktop/RD/simone",
  "author": {
    "name": "max ogden"
  },
  "bugs": {
    "url": "https://github.com/maxogden/menubar/issues"
  },
  "dependencies": {
    "electron-positioner": "^3.0.0",
    "extend": "^2.0.0"
  },
  "description": "high level way to create menubar desktop applications with electron",
  "devDependencies": {
    "standard": "^5.4.1"
  },
  "directories": {},
  "dist": {
    "shasum": "8f2761597b4a0ee87edf04a87d8aab1aac2c44e9",
    "tarball": "https://registry.npmjs.org/menubar/-/menubar-5.2.3.tgz"
  },
  "gitHead": "ec2b2be36bd9cc4686056f3c40827704b98278c3",
  "homepage": "https://github.com/maxogden/menubar",
  "keywords": [
    "electron",
    "atom",
    "shell",
    "menubar",
    "menu",
    "mac",
    "app"
  ],
  "license": "BSD-2-Clause",
  "main": "index.js",
  "maintainers": [
    {
      "name": "maxogden",
      "email": "max@maxogden.com"
    },
    {
      "name": "fritzy",
      "email": "fritzy@netflint.net"
    },
    {
      "name": "fabien-d",
      "email": "fabien.doiron@gmail.com"
    },
    {
      "name": "jenslind",
      "email": "jens@jensl.se"
    }
  ],
  "name": "menubar",
  "optionalDependencies": {},
  "readme": "# menubar\n\nHigh level way to create menubar desktop applications with electron\n\nThis module provides boilerplate for setting up a menubar application using electron. all you have to do is point it at your `index.html` and menubar icon and this will handle opening/closing a window when you click/blur.\n\nWorks on Mac OS, Windows and some Linuxes (Tested on Xfce4, your mileage may vary -- patches welcome!)\n\n**Mac OS**\n\n![screenshot](screenshot.png)\n\n**Windows**\n\n![screenshot](screenshot-windows.png)\n\n[![Build Status](https://travis-ci.org/maxogden/menubar.svg?branch=master)](https://travis-ci.org/maxogden/menubar)\n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\nWatch the 1HR screen recording of me coding this module: https://www.youtube.com/watch?v=PAJAvsyaHs0\n\nThis module was written for + is used by [Monu](https://github.com/maxogden/monu)\n\n## installation\n\n```\nnpm install menubar --save\n```\n\n## usage\n\ncreate a JS program like this:\n\n```js\nvar menubar = require('menubar')\n\nvar mb = menubar()\n\nmb.on('ready', function ready () {\n  console.log('app is ready')\n  // your app code here\n})\n```\n\nmake sure there is also a `index.html` file in `dir`\n\nthen use [`electron`](https://npmjs.org/electron-prebuilt) or [`electron-packager`](https://npmjs.org/electron-packager) to build/run the app:\n\n```\n$ npm install electron-prebuilt -g\n$ electron your-app.js\n```\n\nsee `example/` for a working example\n\nthe return value of `mb` is an event emitter with these properties:\n\n```\n{\n  app: the electron require('app') instance,\n  window: the electron require('browser-window') instance,\n  tray: the electron require('tray') instance,\n  positioner: the electron-positioner instance,\n  setOption(option, value): change an option after menubar is created,\n  getOption(option): get an menubar option,\n  showWindow(): show the menubar window,\n  hideWindow(): hide the menubar window\n}\n```\n\n## options\n\nyou can pass an optional options object into the menubar constructor\n\n- `dir` (default `process.cwd()`) - the app source directory\n- `index` (default `file:// + opts.dir + index.html`) - the html to load for the pop up window\n- `icon` (default `opts.dir + IconTemplate.png`) - the png icon to use for the menubar. A good size to start with is 20x20. To support retina, supply a 2x sized image (e.g. 40x40) with `@2x` added to the end of the name, so `icon.png` and `icon@2x.png` and Electron will automatically use your `@2x` version on retina screens.\n- `tooltip` (default empty) - menubar tray icon tooltip text\n- `tray` (default created on-the-fly) - an electron `Tray` instance. if provided `opts.icon` will be ignored\n- `preloadWindow` (default false) - Create [BrowserWindow](https://github.com/atom/electron/blob/master/docs/api/browser-window.md) instance before it is used -- increasing resource usage, but making the click on the menubar load faster.\n- `width` (default 400) - window width\n- `height` (default 400) - window height\n- `x` (default null) - the x position of the window\n- `y` (default null) - the y position of the window\n- `alwaysOnTop` (default false) - if true, the window will not hide on blur\n- `showOnAllWorkspaces` (default true) - Makes the window available on all OS X workspaces.\n- `windowPosition` (default trayCenter and trayBottomCenter on Windows) - Sets the window position (x and y will still override this), check [positioner docs](https://github.com/jenslind/electron-positioner#docs) for valid values.\n- `showDockIcon` (default false) - Configure the visibility of the application dock icon.\n- `showOnRightClick` (default false) - Show the window on 'right-click' event instead of regular 'click'\n\n## events\n\nthe return value of the menubar constructor is an event emitter\n\n- `ready` - when the app has been created and initialized\n- `create-window` - the line before new BrowserWindow is called\n- `after-create-window` - the line after all window init code is done\n- `show` - the line before window.show is called\n- `after-show` - the line after window.show is called\n- `hide` - the line before window.hide is called (on window blur)\n- `after-hide` - the line after window.hide is called\n- `after-close` - after the .window (BrowserWindow) property has been deleted\n- `focus-lost` - emitted if always-on-top option is set and the user clicks away\n\n## tips\n\n- Use `mb.on('after-create-window', callback)` to run things after your app has loaded. For example you could run `mb.window.openDevTools()` to open the developer tools for debugging, or load a different URL with `mb.window.loadUrl()`\n\n- Use `mb.on('focus-lost')` if you would like to perform some operation when using the option `alwaysOnTop:true`\n\n- To restore focus of previous window after menubar hide, use `mb.on('after-hide', () => { mb.app.hide() } )` or similar",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/maxogden/menubar.git"
  },
  "scripts": {
    "test": "standard"
  },
  "version": "5.2.3"
}
